import React, { useState } from "react";
import {
  Paper,
  IconButton,
  Menu,
  MenuItem,
  Typography,
  Box,
} from "@mui/material";
import { Heading } from "@chakra-ui/react";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import ArrowUpwardIcon from "@mui/icons-material/ArrowUpward";
import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import CveDetailsAccordion from "./CVEdetailsAccordion";
import VulnerabilityCard from "./VulnerabilityCard";

const data = {
  CostBreakdown: {
    costToFix: {
      cost: 0,
      Reasoning:
        "The fix for this vulnerability involves updating the Expat library to a version where the vulnerability is patched. This update is generally available for free as part of regular software updates from the library maintainers.",
    },
    HardwareCostPerSystem: {
      cost: 0,
      Reasoning:
        "There is no hardware cost associated with this vulnerability as it is purely a software issue. Fixing it involves updating the software library, which does not require any hardware changes.",
    },
  },
  TimeToFixPerSystemInMinutes: 30,
  ActionPlan: [
    "Identify all systems using Expat 2.0.1 or the affected version of XML-Twig module for Perl.",
    "Check for any available updates or patches for the Expat library that address CVE-2009-3560.",
    "Schedule a maintenance window to apply the updates to minimize disruption.",
    "Backup critical data and configurations before applying the update.",
    "Apply the update to the Expat library on all affected systems.",
    "Test the systems after the update to ensure that the application functions correctly and the vulnerability is resolved.",
    "Monitor the systems for any unusual activity post-update to ensure stability.",
  ],
  SkillsNeeded: [
    "System Administration",
    "Software Update Management",
    "Knowledge of Perl and XML-Twig module",
    "Understanding of Software Vulnerabilities and Patching",
  ],
};

const VulnerabilityTable = ({ vulnerabilities }) => {
  // Set default order to descending
  const [order, setOrder] = useState("desc");
  const [orderBy, setOrderBy] = useState("Severity");
  const [anchorEl, setAnchorEl] = useState(null);

  // Handle clicking on the dropdown to toggle menu
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  // Handle closing of the menu and updating the order state
  const handleClose = (orderOption) => {
    setAnchorEl(null);
    if (orderOption) {
      setOrder(orderOption);
    }
  };

  // Sort vulnerabilities by severity based on selected order
  const sortedVulnerabilities = vulnerabilities
    .flatMap((port) =>
      port.Vulnerabilities.map((vuln) => ({
        Port: port.Port,
        Protocol: port.Protocol,
        Service: port.Service,
        ServiceVersion: port.ServiceVersion,
        ...vuln,
      }))
    )
    .sort((a, b) => {
      if (orderBy === "Severity") {
        return order === "asc"
          ? a.Severity - b.Severity
          : b.Severity - a.Severity;
      }
      return 0;
    });

  return (
    <>
      <Heading sx={{ color: "#062c30" }} mb={4}>
        Network Vulnerability Interactive Table
      </Heading>

      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          marginBottom: "16px",
          alignItems: "center",
        }}
      >
        <Box display="flex" alignItems="center">
          {/* Display the current sort order */}
          {order === "asc" ? (
            <ArrowUpwardIcon style={{ color: "#062c30", marginRight: "8px" }} />
          ) : (
            <ArrowDownwardIcon
              style={{ color: "#062c30", marginRight: "8px" }}
            />
          )}
          <Typography variant="h6" style={{ color: "#062c30" }}>
            Ordering by Severity
          </Typography>
        </Box>

        <IconButton
          onClick={handleClick}
          sx={{ color: "#062c30" }}
          aria-controls="sort-menu"
          aria-haspopup="true"
        >
          <ArrowDropDownIcon />
        </IconButton>
        <Menu
          id="sort-menu"
          anchorEl={anchorEl}
          open={Boolean(anchorEl)}
          onClose={() => setAnchorEl(null)}
        >
          <MenuItem onClick={() => handleClose("asc")}>Ascending</MenuItem>
          <MenuItem onClick={() => handleClose("desc")}>Descending</MenuItem>
        </Menu>
      </div>

      <Paper>
        {sortedVulnerabilities.map((vuln, index) => (
          <VulnerabilityCard
            key={`${vuln.CVE}-${index}`}
            vuln={vuln}
            data={vuln.insights}
          />
        ))}
      </Paper>
    </>
  );
};

export default VulnerabilityTable;
